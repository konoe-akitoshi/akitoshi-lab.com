---
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";

// フォルダ内の画像を動的にインポート
const imageFiles = import.meta.glob<{ default: ImageMetadata }>('../assets/img/gallery/*', { eager: true });

// 画像データの配列を作成
const images = Object.entries(imageFiles).map(([path, module]) => {
  // ファイル名を取得（パスから抽出）
  const filename = path.split('/').pop() || '';
  // ファイル名から拡張子を除去してタイトルとして使用
  const title = filename.replace(/\.[^/.]+$/, "");
  
  return {
    src: module.default,
    alt: `Gallery image ${filename}`,
    title: title
  };
});

// 画像をランダムに並び替え（重複なし）
// Set を使用して一意の画像を確保
const uniqueImages = Array.from(new Set(images.map(img => img.src.src)))
  .map(src => images.find(img => img.src.src === src))
  .filter((img): img is typeof images[0] => img !== undefined); // undefinedを除外

const shuffledImages = [...uniqueImages].sort(() => Math.random() - 0.5);
---

<section class="gallery-container">
  <div class="gallery-grid">
    {shuffledImages.map((image, index) => (
      <div class="gallery-item" data-index={index}>
        <div class="gallery-image-container">
          <Image 
            src={image.src} 
            alt={image.alt} 
            class="gallery-image" 
            width={800} 
            height={600} 
            loading="lazy"
          />
        </div>
      </div>
    ))}
  </div>
</section>

<!-- モーダル -->
<div class="gallery-modal" id="galleryModal">
  <div class="modal-backdrop"></div>
  <div class="modal-content">
    <button class="close-button" aria-label="Close modal">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M18 6L6 18M6 6L18 18" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>
    <div class="modal-image-container">
      <img src="" alt="" id="modalImage" class="modal-image">
      <div class="modal-caption">
        <p id="modalTitle"></p>
      </div>
    </div>
  </div>
</div>

<style>
  /* 横スクロール防止 */
  :global(body) {
    overflow-x: hidden;
  }
  
  .gallery-container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
    box-sizing: border-box;
    overflow-x: hidden;
  }

  .gallery-grid {
    display: grid;
    grid-template-columns: repeat(1, 1fr);
    gap: 80px 60px;
    padding: 2rem 0;
  }

  @media (min-width: 640px) {
    .gallery-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 100px 80px;
    }
  }

  @media (min-width: 768px) {
    .gallery-container {
      width: 90%;
      padding: 0 2rem;
    }
    
    .gallery-grid {
      grid-template-columns: repeat(3, 1fr);
      gap: 120px 40px;
      padding: 3rem 0;
    }
  }

  .gallery-item {
    cursor: pointer;
    position: relative;
    overflow: hidden;
    transition: opacity 0.3s ease;
  }

  .gallery-item:hover {
    opacity: 0.9;
  }

  .gallery-image-container {
    width: 100%;
    position: relative;
    overflow: hidden;
    aspect-ratio: 4/3;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f5f5f5;
  }

  .gallery-image {
    width: 100%;
    height: 100%;
    object-fit: contain;
    display: block;
    max-width: 100%;
  }

  /* モーダルスタイル */
  .gallery-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1000;
    overflow: hidden;
    opacity: 0;
    transition: opacity 0.4s cubic-bezier(0.19, 1, 0.22, 1);
    max-width: 100vw;
  }

  .modal-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.95);
    cursor: pointer;
  }

  .gallery-modal.active {
    display: flex;
    justify-content: center;
    align-items: center;
    opacity: 1;
  }

  .modal-content {
    position: relative;
    width: 90%;
    max-width: 1400px;
    height: 90vh;
    display: flex;
    justify-content: center;
    align-items: center;
    max-width: 95vw;
  }

  .close-button {
    position: absolute;
    top: 24px;
    right: 24px;
    z-index: 1010;
    width: 44px;
    height: 44px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(0, 0, 0, 0.3);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    opacity: 0.7;
    transition: all 0.3s ease;
  }

  .close-button:hover {
    opacity: 1;
    background: rgba(0, 0, 0, 0.5);
    transform: scale(1.05);
  }

  .modal-image-container {
    position: relative;
    max-width: 100%;
    max-height: 90vh;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .modal-image {
    max-width: 100%;
    max-height: 85vh;
    object-fit: contain;
    opacity: 0;
    transition: opacity 0.5s ease;
    width: auto;
  }

  .modal-caption {
    margin-top: 16px;
    color: white;
    text-align: center;
    font-size: 0.9rem;
    font-weight: 300;
    letter-spacing: 0.05em;
    opacity: 0.8;
  }

  /* アニメーション */
  @keyframes fadeIn {
    from { 
      opacity: 0;
    }
    to { 
      opacity: 1;
    }
  }

  .gallery-item {
    animation: fadeIn 0.8s ease forwards;
    animation-delay: calc(var(--index) * 0.05s);
    opacity: 0;
  }

  /* モーダルアニメーション */
  @keyframes modalFadeIn {
    from { 
      opacity: 0;
      transform: scale(0.98);
    }
    to { 
      opacity: 1;
      transform: scale(1);
    }
  }

  .modal-content {
    animation: modalFadeIn 0.5s cubic-bezier(0.19, 1, 0.22, 1) forwards;
  }
</style>

<script is:inline>
  // ページ読み込み後に実行
  document.addEventListener('DOMContentLoaded', () => {
    const galleryItems = document.querySelectorAll('.gallery-item');
    const modal = document.getElementById('galleryModal');
    const modalImage = document.getElementById('modalImage');
    const modalTitle = document.getElementById('modalTitle');
    // 不要な変数を削除
    // const modalDescription = document.getElementById('modalDescription');
    const closeButton = document.querySelector('.close-button');
    // 不要な変数を削除
    // const prevButton = document.getElementById('prevButton');
    // const nextButton = document.getElementById('nextButton');
    
    // 画像データを取得
    let currentIndex = 0;
    const images = [];
    
    // 各ギャラリーアイテムからデータを抽出
    galleryItems.forEach((item) => {
      const img = item.querySelector('img');
      const dataIndex = item.getAttribute('data-index');
      const originalIndex = parseInt(dataIndex);
      
      // シャッフルされた画像配列から元のデータを取得
      const originalData = window.shuffledImagesData ? window.shuffledImagesData[originalIndex] : null;
      const title = originalData?.title || img.alt;
      
      images.push({
        src: img.src,
        alt: img.alt,
        title: title
      });
    });
    
    // グローバル変数に画像データを保存
    window.galleryImagesData = images;

    // ギャラリーアイテムクリック時の処理
    galleryItems.forEach((item, index) => {
      item.addEventListener('click', () => {
        currentIndex = index;
        updateModal();
        modal.classList.add('active');
        document.body.style.overflow = 'hidden'; // スクロール防止
      });
    });

    // モーダルを閉じる
    closeButton.addEventListener('click', closeModal);
    
    // モーダルの背景部分をクリックしたときに閉じる
    document.querySelector('.modal-backdrop').addEventListener('click', function(e) {
      e.stopPropagation();
      closeModal();
    });
    
    // モーダルコンテンツ部分のクリックイベントが伝播しないようにする
    document.querySelector('.modal-content').addEventListener('click', function(e) {
      e.stopPropagation();
    });

    // キーボードナビゲーション
    document.addEventListener('keydown', (e) => {
      if (!modal.classList.contains('active')) return;
      
      if (e.key === 'Escape') {
        closeModal();
      }
    });

    // モーダルを閉じる関数
    function closeModal() {
      modal.classList.remove('active');
      document.body.style.overflow = ''; // スクロール復活
      
      // アニメーション完了後に非表示
      setTimeout(() => {
        if (!modal.classList.contains('active')) {
          modal.style.display = 'none';
        }
      }, 300);
    }


    // モーダル内容更新関数
    function updateModal() {
      const image = images[currentIndex];
      
      // 画像を設定
      modalImage.src = image.src;
      modalImage.alt = image.alt;
      modalTitle.textContent = image.title;
      
      // 画像読み込み完了後にフェードイン
      modalImage.onload = () => {
        setTimeout(() => {
          modalImage.style.opacity = 1;
        }, 100);
      };
      
      // 表示
      modal.style.display = 'flex';
    }
  });
  
  // ページ読み込み時にフェードイン効果
  window.addEventListener('load', () => {
    const gallery = document.querySelector('.gallery-grid');
    if (gallery) {
      gallery.style.opacity = 0;
      setTimeout(() => {
        gallery.style.transition = 'opacity 800ms';
        gallery.style.opacity = 1;
      }, 100);
    }
  });
</script>
