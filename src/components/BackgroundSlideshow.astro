---
import { Image } from 'astro:assets';
const galleryImages = import.meta.glob('../assets/img/gallery/*.{webp,jpg,jpeg,png}', { eager: true });
let slideImages = Object.values(galleryImages).map((img: any) => img.default);

// シャッフル関数
function shuffle<T>(array: T[]): T[] {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}
// ランダムで最大10枚だけ使う
slideImages = shuffle(slideImages).slice(0, 10);
---

<div id="bg-slideshow">
  <Image
    id="bg-slide-img-1"
    src={slideImages[0]}
    alt=""
    width={slideImages[0]?.width}
    height={slideImages[0]?.height}
    style="position:fixed;top:0;left:0;z-index:-1;transition:opacity 2s cubic-bezier(.4,0,.2,1);opacity:1;object-fit:cover;width:100vw;height:100vh;"
    class="bg-slide-img"
    loading="lazy"
    decoding="async"
  />
  <Image
    id="bg-slide-img-2"
    src={slideImages[0]}
    alt=""
    width={slideImages[0]?.width}
    height={slideImages[0]?.height}
    style="position:fixed;top:0;left:0;z-index:-2;transition:opacity 2s cubic-bezier(.4,0,.2,1);opacity:0;object-fit:cover;width:100vw;height:100vh;"
    class="bg-slide-img"
    loading="lazy"
    decoding="async"
  />
  <!-- インジケーター -->
  <div id="bg-slideshow-indicator">
    {slideImages.map((_, i) => (
      <div class="indicator-bar" id={`indicator-bar-${i}`}></div>
    ))}
  </div>
</div>

<style>
  #bg-slideshow-indicator {
    position: fixed;
    bottom: 24px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 12px;
    z-index: 1;
    pointer-events: none;
  }
  .indicator-bar {
    width: 24px;
    height: 2px;
    background: rgba(255,255,255,0.18);
    border-radius: 1px;
    overflow: hidden;
    position: relative;
    transition: background 0.3s;
  }
  .indicator-bar.active {
    background: rgba(255,255,255,0.45);
  }
  .indicator-bar .progress {
    display: block;
    height: 100%;
    background: rgba(255,255,255,0.7);
    border-radius: 1px;
    width: 0%;
    animation: progressBarAnim 10s linear forwards;
  }
  @keyframes progressBarAnim {
    from { width: 0%; }
    to { width: 100%; }
  }
  #bg-slide-img-1,
  #bg-slide-img-2 {
    width: 100%;
    height: 100vh;
    object-fit: cover;
    position: fixed;
    top: 0;
    left: 0;
    z-index: -1;
    transition: opacity 2s cubic-bezier(.4,0,.2,1);
    opacity: 1;
    pointer-events: none;
  }
  #bg-slide-img-2 {
    z-index: -2;
    opacity: 0;
  }
</style>

<script is:inline>
  const slides = ["/src/assets/img/gallery/img1.webp","/src/assets/img/gallery/img2.webp","/src/assets/img/gallery/img3.webp","/src/assets/img/gallery/img4.webp","/src/assets/img/gallery/港.jpg","/src/assets/img/gallery/樹氷.jpeg","/src/assets/img/gallery/木の中の氷.jpeg"];
  let current = 0;
  let showing = 1; // 1 or 2
  const img1 = document.getElementById('bg-slide-img-1');
  const img2 = document.getElementById('bg-slide-img-2');
  const duration = 10000;

  function updateIndicator(current, duration) {
    for (let i = 0; i < slides.length; i++) {
      const bar = document.getElementById(`indicator-bar-${i}`);
      bar.classList.toggle('active', i === current);
      bar.innerHTML = '';
      if (i === current) {
        const progress = document.createElement('span');
        progress.className = 'progress';
        progress.style.animationDuration = duration + 'ms';
        bar.appendChild(progress);
      }
    }
  }

  // 初期表示時にインジケーターをセット
  updateIndicator(current, duration);

  setInterval(() => {
    const next = (current + 1) % slides.length;
    current = next;
    updateIndicator(current, duration);
    if (showing === 1) {
      // img1が表、img2が裏
      img2.src = slides[current];
      img2.style.opacity = 1;
      img1.style.opacity = 0;
      setTimeout(() => {
        // クロスフェード完了後は役割だけスワップ
        showing = 2;
      }, 1200);
    } else {
      // img2が表、img1が裏
      img1.src = slides[current];
      img1.style.opacity = 1;
      img2.style.opacity = 0;
      setTimeout(() => {
        // クロスフェード完了後は役割だけスワップ
        showing = 1;
      }, 1200);
    }
  }, duration);
</script>
